{"version":3,"sources":["types/Status.ts","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoList","todos","selectedTodo","onTodoSelection","className","map","todo","id","completed","title","isSelected","classNames","type","onClick","TodoFilter","query","onSetQuery","onSetStatus","onChange","event","target","value","All","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","onRemoveTodoSelection","useState","userForSelectedTodo","setUserForSelectedTodo","isUserLoaded","setIsUserLoaded","getUserForSelectedTodo","useCallback","idForUser","a","userById","useEffect","href","email","name","App","setTodos","isTodosLoaded","setIsTodosLoaded","setSelectedTodo","setQuery","status","setStatus","getTodosFromServer","todosFromServer","handleTodoSelection","handleRemoveTodoSelection","handleSetQuery","handleSetStatus","filteredTodos","filter","preparedQuery","toLowerCase","trim","includes","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eceb737c.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onTodoSelection: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onTodoSelection,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const { id, completed, title } = todo;\n\n        const isSelected = (selectedTodo)\n          ? id === selectedTodo.id\n          : false;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames(\n              { 'has-background-info-light': isSelected },\n            )}\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onTodoSelection(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'far fa-eye': !isSelected,\n                    'fa-eye-slash': isSelected,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { Status } from '../../types/Status';\n\ntype Props = {\n  query: string;\n  onSetQuery: (value: string) => void;\n  onSetStatus: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onSetQuery,\n  onSetStatus,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={event => onSetStatus(event.target.value)}\n        >\n          <option value={Status.All}>All</option>\n          <option value={Status.Active}>Active</option>\n          <option value={Status.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={event => onSetQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onSetQuery('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\nimport { getUser } from '../../api';\n\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo;\n  onRemoveTodoSelection: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onRemoveTodoSelection,\n}) => {\n  const [\n    userForSelectedTodo,\n    setUserForSelectedTodo,\n  ] = useState<User | null>(null);\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n\n  const {\n    userId,\n    id,\n    title,\n    completed,\n  } = selectedTodo;\n\n  const getUserForSelectedTodo = useCallback(async (idForUser) => {\n    const userById = await getUser(idForUser);\n\n    setUserForSelectedTodo(userById);\n    setIsUserLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    getUserForSelectedTodo(userId);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isUserLoaded\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => onRemoveTodoSelection()}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${userForSelectedTodo?.email}`}>\n                  {userForSelectedTodo?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState, useCallback } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { Status } from './types/Status';\n\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isTodosLoaded, setIsTodosLoaded] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('');\n\n  const getTodosFromServer = useCallback(async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n    setIsTodosLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const handleTodoSelection = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const handleRemoveTodoSelection = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const handleSetQuery = useCallback((value: string) => {\n    setQuery(value);\n  }, []);\n\n  const handleSetStatus = useCallback((value: string) => {\n    setStatus(value);\n  }, []);\n\n  const filterTodos = () => {\n    let filteredTodos;\n\n    switch (status) {\n      case Status.Active:\n      case Status.Completed:\n        filteredTodos = todos.filter(\n          todo => (status === Status.Active\n            ? !todo.completed\n            : todo.completed),\n        );\n        break;\n      default:\n        filteredTodos = todos;\n    }\n\n    if (query) {\n      const preparedQuery = query.toLowerCase().trim();\n\n      filteredTodos = filteredTodos.filter(\n        todo => todo.title.toLowerCase().includes(preparedQuery),\n      );\n    }\n\n    return filteredTodos;\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onSetQuery={handleSetQuery}\n                onSetStatus={handleSetStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isTodosLoaded\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filterTodos()}\n                    selectedTodo={selectedTodo}\n                    onTodoSelection={handleTodoSelection}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n        && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            onRemoveTodoSelection={handleRemoveTodoSelection}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}